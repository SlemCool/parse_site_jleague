import os

from config import app_logger
from db.data import create_data_file, read_file, write_file
from dotenv import load_dotenv
from telebot import TeleBot, types

logger = app_logger.get_logger(__name__)
load_dotenv()
DATA_FILE_USERS = "data/users.txt"
create_data_file(DATA_FILE_USERS)
DATA_FILE_SUB_REQUEST = "data/sub_reqst.txt"
create_data_file(DATA_FILE_SUB_REQUEST)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_ID_ADMIN = os.getenv("TELEGRAM_CHAT_ID")

bot = TeleBot(TELEGRAM_TOKEN)


@bot.message_handler(commands=["start"])
def start_message(message: types.Message) -> None:
    """/start command handler

    Args:
        message (types.Message): user's message object
    """
    user_id = message.chat.id
    user_full_name = message.from_user.full_name
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s - %s –Ω–∞–∂–∞–ª –°–¢–ê–†–¢!", user_id, user_full_name)
    bot.send_message(user_id, f"–ü—Ä–∏–≤–µ—Ç {user_full_name} ‚úåÔ∏è")


@bot.message_handler(commands=["help"])
def help_message(message: types.Message) -> None:
    """/help command handler

    Args:
        message (types.Message): user's message object
    """
    user_id = message.chat.id
    message = (
        "–≠—Ç–æ—Ç –±–æ—Ç –∏—â–µ—Ç üîç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —Å—É–¥—å—é –≤ –º–∞—Ç—á–∞—Ö Jleague üáØüáµ\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/add_me - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "/remove_me - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"
    )
    bot.send_message(user_id, message)


@bot.message_handler(commands=["add_me"])
def subscribe(message: types.Message) -> None:
    """Add user to the data file. For sending messages

    Args:
        message (types.Message): user's message object
    """
    user_id = str(message.chat.id)
    user_full_name = message.from_user.full_name
    message = "üì£ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ..."
    subscribers = read_file(DATA_FILE_USERS)
    subscription_request = read_file(DATA_FILE_SUB_REQUEST)
    if user_id in subscribers:
        message = "–í—ã —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–∞—Ö üìú –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É."
    elif user_id in subscription_request:
        message = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    else:
        write_file(user_id, DATA_FILE_SUB_REQUEST)
        bot.send_message(
            TELEGRAM_ID_ADMIN, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}-{user_full_name} –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É"
        )
        logger.info(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s-%s "
            "–ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞—Å—Å—ã–ª–∫—É"
            , user_id, user_full_name
        )
    bot.send_message(user_id, message)


@bot.message_handler(commands=["2988329"])
def approved_user(message: types.Message) -> None:
    """Approve the user's application"""
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    subscribers = read_file(DATA_FILE_USERS)
    subscription_request = read_file(DATA_FILE_SUB_REQUEST)
    count_user = 0
    if subscription_request:
        for user_id in subscription_request:
            logger.info("–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s –≤ —Ä–∞—Å—Å—ã–ª–∫—É", user_id)
            if user_id not in subscribers:
                count_user += 1
                write_file(user_id, DATA_FILE_USERS)
                bot.send_message(user_id, "–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∞! ü™á")
    logger.info("–û—á–∏—â–∞–µ–º —Ñ–∞–π–ª —Å –∑–∞—è–≤–∫–∞–º–∏")
    subscription_request.clear()
    write_file(subscription_request, DATA_FILE_SUB_REQUEST, method="w")
    bot.send_message(
        TELEGRAM_ID_ADMIN, f"–£—Å–ø–µ—à–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ: {count_user} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å(–ª—è, –ª–µ–π)"
    )


@bot.message_handler(commands=["remove_me"])
def unsubscribe(message: types.Message) -> None:
    """Remove user from the data file. For not sending messages

    Args:
        message (types.Message): user's message object
    """
    user_id = str(message.chat.id)
    user_full_name = message.from_user.full_name
    message = "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. ü•π"
    subscribers = read_file(DATA_FILE_USERS)
    if user_id in subscribers:
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s-%s —É–¥–∞–ª–∏–ª—Å—è –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏", user_id, user_full_name)
        subscribers.remove(user_id)
        write_file(subscribers, DATA_FILE_USERS, method="w")
    else:
        message = "–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É. ü§∑‚Äç‚ôÇÔ∏è"
    bot.send_message(user_id, message)


@bot.message_handler(func=lambda message: True)
def echo_message(message):
    bot.reply_to(message, message.text)


def send_to_user(user_id, message: str) -> None:
    """Sending a message to the user

    Args:
        user_id (str): user id
        message (str): text message
    """
    logger.info("–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '%s'", user_id)
    try:
        bot.send_message(user_id, message)
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: '%s'", user_id)
    except Exception as error:
        logger.error(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: '%s' –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", user_id, error
        )


def send_to_all_users(message: str) -> None:
    """Sending a message to all users who subscribe

    Args:
        message (str): text message
    """
    logger.info("–ù–∞—á–∞–ª–æ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    users = read_file(DATA_FILE_USERS)
    for user_id in users:
        try:
            bot.send_message(user_id, message, disable_web_page_preview=True)
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: '%s'", user_id)
        except Exception as error:
            logger.error(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: '%s' –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", user_id, error
            )


def start_bot():
    bot.infinity_polling()
