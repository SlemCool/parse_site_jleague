import os
import random
import time
from parser.parse_4score import get_trends
from parser.parse_jleague import parse_and_check_referee
from threading import Thread

from bot import main_bot
from config import app_logger
from dotenv import load_dotenv

logger = app_logger.get_logger(__name__)
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_ID_ADMIN = os.getenv("TELEGRAM_CHAT_ID")
URL_JLEAGUE_LATEST = "https://www.jleague.jp/match/search/j1/latest/"
# URL_JLEAGUE_LATEST = "https://www.jleague.jp/match/section/j1/34/"  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
URL_TREND = "https://4score.ru/referee/18910"


def rnd_sleep_interval() -> int:
    return random.randint(120, 360)


def check_tokens() -> bool:
    """Checks the presence of all tokens

    Returns:
        bool
    """
    return all((TELEGRAM_TOKEN, TELEGRAM_ID_ADMIN))


def collect_event_message(event: list) -> str:
    """Collects the final event message

    Args:
        event (list): event data

    Returns:
        str: message string
    """
    match_info = (
        f"\U0001F525 –†–µ—Ñ–µ—Ä–∏: {event[0]}"
        f"\n–°—Å—ã–ª–∫–∞ üáØüáµ: {event[1]}"
        f"\n–°—Å—ã–ª–∫–∞ üá∫üá∏: {event[2]}"
    )
    message = f"\U000026A0 –í–Ω–∏–º–∞–Ω–∏–µ \U000026A0\n\n{match_info}\n\n"
    trend_info = get_trends(URL_TREND)
    if trend_info:
        message += f"\U0001F4C8 –¢—Ä–µ–Ω–¥—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∏:\n{trend_info}"
    return message


def main():
    """The main logic of the work of the bot"""
    logger.info("–ë–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç –∫ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—é")
    if not check_tokens():
        message = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        logger.critical(message)
        raise ValueError(message)
    logger.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É")
    message = "\U0001F916 'JLbot' –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –∏–≥—Ä—ã. \U0001F50D"
    main_bot.send_to_user(TELEGRAM_ID_ADMIN, message)
    while True:
        try:
            event_data = parse_and_check_referee(URL_JLEAGUE_LATEST)
            if event_data:
                logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω—É–∂–Ω—ã–π –º–∞—Ç—á: {event_data[1]}")
                message = collect_event_message(event_data)
                main_bot.send_to_all_users(message)
        except Exception as error:
            message = f"–°–±–æ–π –≤ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {error}"
            main_bot.send_to_user(TELEGRAM_ID_ADMIN, message)
            logger.error(message)
        finally:
            retry_interval = rnd_sleep_interval()
            logger.info(f"–ó–∞—Å—ã–ø–∞—é –Ω–∞ - {retry_interval} —Å–µ–∫")
            time.sleep(retry_interval)


if __name__ == "__main__":
    Thread(target=main).start()
    Thread(target=main_bot.start_bot).start()


# python -m nuitka --follow-imports --include-package-data=selenium  --standalone --include-data-files=.env=.env  --remove-output --windows-icon-from-ico=assets\logo.png  -o JLparser app\JLparser.py
